plot.forecast(forecast_hw)
demand <- ts(selected_df$Circular.Stapler.Circular.Stapler.Stryker.Sustainability.Circular.Stapler.excl.PPH)
plot(demand)
plot(forecast_hw)
hw <- HoltWinters(selected_df[,2])
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
hw <- HoltWinters(selected_df[,2])
plot.forecast(forecast_hw)
ts <- ts(selected_df)
plot(ts)
hw <- HoltWinters(ts)
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
plot.forecast(arima_forecast)
summary(arima_auto)
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(arima_auto, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
selected_df <- data.frame(endomech$Date, endomech[column])
endomech <- read.csv("endomech.csv", header = TRUE)
selected_df <- data.frame(endomech$Date, endomech[column])
endomech <- read.csv("endomech.csv", header = TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
head(endomech)
head(names(endomech))
str(endomech)
column <- readline('Enter column name: ')
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
install.packages("forecast")
library('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_arima
SSE_linear
SSE_exp_smoothing
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(arima_auto, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
library(ggplot2)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
ggplot(old_and_predicted) +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted[,2]))
old_and_predicted <- rbind(selected_df, test_data)
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
ggplot(old_and_predicted) +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted[,2]))
ggplot(selected_df) +
geom_line(data = selected_df, aes(Date, selected_df[,2]))
geom_line(data = test_data, aes(Date, test_data[,2]), colour = 'red', size = 3)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'l')
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
ggplot(old_and_predicted) +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted[,2]))
ggplot(selected_df) +
geom_line(data = selected_df, aes(Date, selected_df[,2]))
ggplot(selected_df) +
geom_line(data = selected_df, aes(Date, selected_df[,2])) +
geom_line(data = test_data, aes(Date, test_data[,2]), colour = 'red', size = 3)
ggplot(old_and_predicted) +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted[,2]), colour =
ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'))
ggplot(old_and_predicted) +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted$Circular.Stapler.Circular.Stapler.Stryker.Sustainability.Circular.Stapler.excl.PPH), colour =
ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'))
ggplot(selected_df) +
geom_line(data = selected_df, aes(Date, selected_df[,2])) +
geom_line(data = test_data, aes(Date, test_data[,2]), colour = 'red', size = 3)
ggplot(old_and_predicted)
ggplot(old_and_predicted, aes(x=Date, y=old_and_predicted[,2]), colour = 'red')
ggplot(old_and_predicted, aes(x=Date), colour = 'red')
ggplot(old_and_predicted, aes(x=Date, y = old_and_predicted$Circular.Stapler.Circular.Stapler.Stryker.Sustainability.Circular.Stapler.excl.PPH), colour = 'red') +
geom_line(data = old_and_predicted, aes(Date, old_and_predicted[,2]), colour =
ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'))
ggplot(old_and_predicted, aes(x=Date, y = old_and_predicted$Circular.Stapler.Circular.Stapler.Stryker.Sustainability.Circular.Stapler.excl.PPH), colour = 'red')
names(old_and_predicted)
ggplot(old_and_predicted, aes(x=Date, y = Circular.Stapler.Circular.Stapler.Stryker.Sustainability.Circular.Stapler.excl.PPH), colour = 'red')
ggplot(old_and_predicted, colour = 'red') +
geom_line(aes(Date, old_and_predicted[,2]))
ggplot(old_and_predicted, colour = 'red') +
geom_line(aes(Date, old_and_predicted[1:,2]))
ggplot(old_and_predicted, colour = 'red') +
geom_line(aes(Date, old_and_predicted[1:,2]))
ggplot(old_and_predicted, colour = 'red') +
geom_line(aes(Date, old_and_predicted[,2]))
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min(SSE_vec)
min_index <- which.min(SSE_vec)
min
min_index
best_predict <- ifelse(min_index == 1, "auto_arima", ifelse(min_index == 2, "linear", "exp_smoothing"))
test_data$predict <- predict(best_predict, newdata = test_data$Date)
best_predict <- ifelse(min_index == 1, auto_arima, ifelse(min_index == 2, linear, exp_smoothing))
best_predict <- ifelse(min_index == 1, arima_auto, ifelse(min_index == 2, linear, exp_smoothing))
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
prac <- arima_auto
endomech <- read.csv("endomech.csv", header = TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
head(endomech)
head(names(endomech))
str(endomech)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
min_index
best_predict <- ifelse(min_index == 1, auto.arima(selected_df[,2], max.P = 10, max.Q = 10),
ifelse(min_index == 2, lm(selected_df[,2] ~ selected_df$endomech.Date),
HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)))
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
best_predict
best_predict[1]
best_predict[[1]]
arima_auto
arima_auto$coef
ifelse(min_index == 1, assign(best_predict, auto.arima(selected_df[,2], max.P = 10, max.Q = 10))
assign(prac, auto.arima(selected_df[,2], max.P = 10, max.Q = 10))
assign(prac, auto.arima(selected_df[,2], max.P = 10, max.Q = 10))
assign("prac", auto.arima(selected_df[,2], max.P = 10, max.Q = 10))
prac
endomech <- read.csv("endomech.csv", header = TRUE)
head(names(endomech))
str(endomech)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
arima_auto$coef
ifelse(SSE_arima < (SSE_exp_smoothing & SSE_linear), 1, 0)
ifelse(SSE_arima < (SSE_exp_smoothing), 1, 0)
ifelse(SSE_arima < (SSE_exp_smoothing && SSE_linear), 1, 0)
if(min_index == 1, 1, 0)
if(min_index == 1, 1)
if(min_index == 1)
ifelse(min_index == 1, 1, 0)
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)), 0)
assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10))
best_predict
ifelse(1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)), 0)
best_predict
ifelse(1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)), 0)
best_predict
rm(best_predict)
ifelse(1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)), 0)
best_predict
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
best_predict
ifelse(min_index == 2, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 1, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
best_predict
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
best_predict
best_predict <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
best_predict
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
best_predict
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
endomech <- read.csv("endomech.csv", header = TRUE)
install.packages("ggplot2")
install.packages("plotly")
head(endomech)
head(names(endomech))
str(endomech)
column <- readline('Enter column name: ')
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
endomech <- read.csv("endomech.csv", header = TRUE)
endomech <- read.csv("endomech.csv", header = TRUE)
install.packages("ggplot2")
head(endomech)
head(names(endomech))
str(endomech)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
head(names(endomech))
str(endomech)
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/3/1"), as.Date("2017/2/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
View(endomech)
View(endomech)
View(endomech)
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/3/1")),'black','red'), type = 'b')
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
head(str(endomech))
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
endomech <- read.csv("endomech.csv", header = TRUE)
install.packages("ggplot2")
column <- readline('Enter column name: ')
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
install.packages('forecast')
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
install.packages("TTR")
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
