<<<<<<< HEAD
c -> 6
c
source('~/.active-rstudio-document', echo=TRUE)
c = 6
c
endomech <- read.csv("endomech.csv", header = TRUE)
head(endomech)
head(names(endomech))
head(str(endomech))
column <- readline('Enter column name: ')
setwd("~/Documents/J&J/Week1_prac/jnjweek1")
endomech <- read.csv("endomech.csv", header = TRUE)
endomech <- read.csv("endomech.csv", header = TRUE)
head(endomech)
head(names(endomech))
head(str(endomech))
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
?cat
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
endomech <- read.csv("endomech.csv", header = TRUE)
head(str(endomech))
str(endomech)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
type(column)
type(endomech[column])
type(endomech[,column])
type(selected_df[,2])
str(selected_df)
as.numeric(as.character(selected_df[,2]))
selected_df <- data.frame(endomech$Date, endomech[column])
as.character(selected_df[,2])
as.numeric(as.character(selected_df[,2]))
as.numeric(levels(selected_df[,2]))
as.numeric(selected_df[,2])
endomech <- read.csv("endomech.csv", header = TRUE)
View(endomech)
as.numeric(levels(selected_df[,2])[selected_df[,2]]
# getting a mean from the 'non NA' data in the column
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
# changing all the NAs to the calculated mean
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
# selected_df <- selected_df[1:74,]
# change date column from factor variable to an actual graphable date
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
# linear model
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
# arima model
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
# exponential smoothing
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
# Sum of Squared Residuals, pick the best by hand
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
# predict one year
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
as.numeric(levels(selected_df[,2])[selected_df[,2]]
# getting a mean from the 'non NA' data in the column
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
# changing all the NAs to the calculated mean
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
# selected_df <- selected_df[1:74,]
# change date column from factor variable to an actual graphable date
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
# linear model
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
# arima model
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
# exponential smoothing
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
# Sum of Squared Residuals, pick the best by hand
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
# predict one year
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
as.numeric(levels(selected_df[,2])[selected_df[,2]])
as.numeric(levels(selected_df[,2])
# getting a mean from the 'non NA' data in the column
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
# changing all the NAs to the calculated mean
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
# selected_df <- selected_df[1:74,]
# change date column from factor variable to an actual graphable date
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
# linear model
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
# arima model
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
# exponential smoothing
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
# Sum of Squared Residuals, pick the best by hand
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
# predict one year
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
names(selected_df) <- c("Date", column)
plot(selected_df$Date, selected_df[,2],type="l")
names(test_data) <- c("Date", column)
old_and_predicted <- rbind(selected_df, test_data)
plot(old_and_predicted$Date, old_and_predicted[,2],xlab="Date",ylab="Variable of Choice",
col = ifelse((old_and_predicted$Date < as.Date("2016/11/1")),'black','red'), type = 'b')
endomech <- read.csv("endomech.csv", header = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
as.numeric(levels(selected_df[,2]))
as.character(selected_df[,2])
test <- as.character(selected_df[,2])
test1 <- as.numeric(test)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
test <- as.character(selected_df[,2])
test1 <- as.numeric(test)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
Circular.Stapler.Circular.Stapler.Ethicon.Circular.Stapler.excl.PPH
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
trim <- function (x) gsub("^\\s+|\\s+$", "", selected_df[,2])
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trimmed <- trim(selected_df[,2])
test <- as.character(trimmed)
test1 <- as.numeric(test)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
str(selected_df)
test <- as.character(trimmed)
test
as.integer(selected_df[,2])
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
head(endomech)
str(endomech)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
str(selected_df)
selected_df[,2] <- as.character(selected_df[,2])
str(selected_df)
as.numeric(selected_df)
as.numeric(selected_df[,2])
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
as.numeric.factor(selected_df[,2])
as.numeric(selected_df[,2])
str(selected_df)
selected_df[,2]
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trim(selected_df[,2])
gsub(",", "", trimmed)
trimmed <- trim(selected_df[,2])
gsub(",", "", trimmed)
as.numeric(gsub(",", "", trimmed))
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
typeof(selected_df[,2])
str(selected_df)
View(selected_df)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
typeof(selected_df[,2])
View(selected_df)
str(selected_df)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech$Date, trim(gsub(",", "", endomech[column])))
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, trim(gsub(",", "", endomech[column])))
View(selected_df)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
str(selected_df)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trimmed <- trim(selected_df[,2])
gsub(",", "", trimmed)
as.numeric(gsub(",", "", trimmed))
endomech[column]
typeof(endomech[column])
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
selected_df <- data.frame(endomech, as.numeric(gsub(
",", "", trim(as.character(endomech[column])))))
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech, as.numeric(gsub(
",", "", trim(as.character(endomech[column])))))
View(selected_df)
c
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech$Date, endomech[column])
selected_df <- data.frame(endomech, as.numeric(gsub(
",", "", trim(as.character(endomech[column])))))
selected_df <- data.frame(endomech$Date, as.numeric(gsub(
",", "", trim(as.character(endomech[column])))))
View(selected_df)
prac_df <- selected_df
prac_df[,2]
selected_df <- data.frame(endomech$Date, endomech[column])
prac_df <- selected_df
prac_df[,2]
new_col <- as.numeric(gsub(",", "", trimmed))
typeof(selected_df[,2])
str(selected_df)
selected_df[,2] <- as.character(selected_df[,2])
str(selected_df)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trimmed <- trim(selected_df[,2])
gsub(",", "", trimmed)
new_col <- as.numeric(gsub(",", "", trimmed))
data.frame(endomech$Date, column = new_col)
endomech[column]
as.character(endomech[column])
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, column = new_col)
View(selected_df)
str(selected_df)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
View(selected_df)
endomech[column][1]
endomech[column][2]
endomech[column][0]
endomech[column][1]
names(endomech[column])
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, new_col)
View(selected_df)
names(endomech[columns])
names(endomech[column])
selected_df <- data.frame(endomech$Date, names(endomech[column]) = new_col)
col_name <- names(endomech[column])
selected_df <- data.frame(endomech$Date,col_name  = new_col)
View(selected_df)
col_name <- quote(names(endomech[column]))
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, eval(col_name) = new_col)
View(selected_df)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
Circular.Stapler.Circular.Stapler.Ethicon.Circular.Stapler.excl.PPH
column <- readline('Enter column name: ')
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
col_name <- names(endomech[column])
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, eval(column) = new_col)
View(selected_df)
str(selected_df)
selected_df <- data.frame(endomech$Date, new_col)
str(selected_df)
selected_df <- data.frame(endomech$Date,col_choice = new_col)
str(selected_df)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
names(selected_df)
names(selected_df) <- c("endomech.Date", column)
names(selected_df)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date,col_choice = new_col)
names(selected_df) <- c("endomech.Date", column)
names(selected_df)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
head(endomech)
head(names(endomech))
str(endomech)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
str(endomech)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
column <- readline('Enter column name: ')
selected_df <- data.frame(endomech$Date, endomech[column])
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, col_choice = new_col)
names(selected_df) <- c("endomech.Date", column)
View(selected_df)
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
str(selected_df)
selected_df <- data.frame(endomech$Date, endomech[column])
View(selected_df)
str(selected_df)
trimmed <- trim(selected_df[,2])
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trimmed <- trim(selected_df[,2])
new_col <- as.numeric(gsub(",", "", trimmed))
selected_df <- data.frame(endomech$Date, col_choice = new_col)
names(selected_df) <- c("endomech.Date", column)
str(selected_df)
non_na_selected <- subset(selected_df, !is.na(selected_df[column]))
non_na_selected
mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df[is.na(selected_df)] <- mean(non_na_selected[1:nrow(non_na_selected),2])
selected_df$endomech.Date <- as.Date(selected_df$endomech.Date
, format = "%m/%d/%Y")
plot(selected_df, type = "l")
linear <- lm(selected_df[,2] ~ selected_df$endomech.Date)
summary(linear)
library('forecast')
arima_auto <- auto.arima(selected_df[,2], max.P = 10, max.Q = 10)
arima_forecast <- forecast.Arima(arima_auto, h = 12)
plot.forecast(arima_forecast)
summary(arima_auto)
library("TTR")
exp_smoothing <- HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE)
forecast_hw <- forecast.HoltWinters(exp_smoothing, h = 12)
plot.forecast(forecast_hw)
SSE_arima <- sum((arima_auto$residuals)^2)
SSE_linear <- sum((linear$residuals)^2)
SSE_exp_smoothing <- exp_smoothing$SSE
SSE_vec <- c(SSE_arima, SSE_linear, SSE_exp_smoothing)
min_index <- which.min(SSE_vec)
best_predict_coef <- ifelse(min_index == 1, assign("best_predict", auto.arima(selected_df[,2], max.P = 10, max.Q = 10)),
ifelse(min_index == 2, assign("best_predict", lm(selected_df[,2] ~ selected_df$endomech.Date)),
assign("best_predict", HoltWinters(selected_df[,2], beta=FALSE, gamma=FALSE))))
test_data <- data.frame(Date = seq(as.Date("2016/11/1"), as.Date("2017/10/1"), "months"))
test_data$predict <- NA
View(test_data)
test_data$predict <- predict(best_predict, newdata = test_data$Date)
test_data
test_data$Date
best_predict
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
str(endomech)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
str(endomech)
source('~/Documents/J&J/Week1_prac/jnjweek1/endomech_practice.R', echo=TRUE)
install.packages('Shiny')
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
runApp('shiny_app.R')
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
ui <- fluidPage("Endomech Forecasting",
selectInput("Column Choice", "Choice", names(endomech)))
runApp('shiny_app.R')
ui <- fluidPage("Endomech Forecasting",
selectInput("Column Choice", "Choice", names(endomech)[1:]))
runApp('shiny_app.R')
ui <- fluidPage("Endomech Forecasting",
selectInput("Column Choice", "Choice", names(endomech, 1:119))
)
runApp('shiny_app.R')
col_choices <- names(endomech)
col_choices <- col_choices[1:]
col_choices <- col_choices[1]
col_choices <- names(endomech)
col_choices <- col_choices[2:119]
runApp('shiny_app.R')
runApp('shiny_app.R')
=======
plot
plot(x,y)
present <-read.table("http://assets.datacamp.com/course/dasi/present.txt")
present
dim(present)
names(present)
num_boys <- present$boys
num_girls <- present$girls
num_boys
num_girls
plot(present$year, present$girls)
plot(x = present$year, y = present$girls, type = "1")
endomech <- read.csv("endomech.csv", header = TRUE, strip.white = TRUE)
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R', echo=TRUE)
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
setwd("~/Documents/J&J Week 1/jnjweek1")
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
source('~/Documents/J&J Week 1/jnjweek1/endomech_practice.R')
test <-as.numeric(as.character(selected_df[,2]))
source('~/Documents/J&J Week 1/jnjweek1/samm_testing.R')
source('~/Documents/J&J Week 1/jnjweek1/samm_testing.R')
source('~/Documents/J&J Week 1/jnjweek1/samm_testing.R')
source('~/Documents/J&J Week 1/jnjweek1/samm_testing.R')
as.num = function(x, na.strings = "NA") {
stopifnot(is.character(x))
na = x %in% na.strings
x[na] = 0
x = as.numeric(x)
x[na] = NA_real_
x
}
as.num(c("1", "2", "X"), na.strings="X")
as.num(c("1", "2", "X"), na.strings="X")
as.num(c(selected_df[,2]))
as.num(c(as.character(selected_df[,2])))
test1 <- as.numeric(test)
>>>>>>> 2f5e090052a74a7443e7b146c8e6e855f6c7b897
